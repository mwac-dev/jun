mod args;
mod generator;
mod model;
mod parser;
mod writer;

use args::Args;
use clap::Parser;
use generator::generate_classes;
use parser::parse_json_file;
use writer::write_to_file;

fn main() {
    let default_class_name = "JunAutoGeneratedModel".to_string();
    let args = Args::parse();

    let json_data = parse_json_file(&args.input);

    let class_name = args
        .class
        .clone()
        .or_else(|| {
            json_data
                .get("_class")
                .and_then(|v| v.as_str())
                .map(|s| s.to_string())
        })
        .unwrap_or(default_class_name);
    
    if !args.force {
        if let Some(output_dir) = &args.output {
            let class_file_path = format!("{}/{}.cs", output_dir, class_name);
            if std::path::Path::new(&class_file_path).exists() {
                println!("Class {} already exists. Use --force or -f to overwrite.", class_name);
                return;
            }
        }
    }

    let generated = generate_classes(&json_data, &class_name);

    for (name, content) in generated {
        if let Some(output_dir) = &args.output {
            write_to_file(output_dir, &name, &content)
                .unwrap_or_else(|e| panic!("Failed to write to file: {}", e));
        } else {
            println!("Generated class: {}", name);
        }
    }
}
